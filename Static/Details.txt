- Static keyword in Java is used for the memory management primarily.
- Static keyword applies to variables, methods, blocks and nested classes.
- The main concept of static is that it belongs to the class rather than the instance of the class.
- we discuss the use of the static keyword to create fields and methods that belong to the class, rather than to an instance of the class.
- When a number of objects are created from the same class blueprint, they each have their own distinct copies of instance variables. In the case of the Bicycle class, 
the instance variables are cadence, gear, and speed. Each Bicycle object has its own values for these variables, stored in different memory locations.
- Sometimes, you want to have variables that are common to all objects. This is accomplished with the static modifier. Fields that have the static modifier in their declaration are called 
static fields or class variables. They are associated with the class, rather than with any object. Every instance of the class shares a class variable, which is in one fixed location in 
memory. Any object can change the value of a class variable, but class variables can also be manipulated without creating an instance of the class.
- The Java programming language supports static methods as well as static variables. Static methods, which have the static modifier in their declarations, should be invoked with the class 
name, without the need for creating an instance of the class, as in
ClassName.methodName(args)
Note: You can also refer to static methods with an object reference like
instanceName.methodName(args)
but this is discouraged because it does not make it clear that they are class methods.
- If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass.








