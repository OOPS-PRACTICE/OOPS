- Abstraction means hiding internal details like remote control
- An abstract class is a class that is declared abstractâ€”it may or may not include abstract methods. Abstract classes cannot be instantiated, but they can be subclassed.
- An abstract method is a method that is declared without an implementation (without braces, and followed by a semicolon)

  abstract void moveTo(double deltaX, double deltaY);
  
  - When an abstract class is subclassed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared abstract.
- You cannot instantiate abstract class, and they may contain a mix of methods declared with or without an implementation. However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and private concrete methods

public abstract class GraphicObject {
   // declare fields
   // declare nonabstract methods
   abstract void draw();
}

- you can extend only one class, whether or not it is abstract

Consider using abstract classes if any of these statements apply to your situation:
- You want to share code among several closely related classes.
- You expect that classes that extend your abstract class have many common methods or fields, or require access modifiers other than public (such as protected and private).
- You want to declare non-static or non-final fields. This enables you to define methods that can access and modify the state of the object to which they belong.


  
