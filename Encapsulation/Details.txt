Encapsulation :

- Encapsulation means data hiding. We do not want to expose the variables.
- It make the checks more centralized.
- In the spirit of encapsulation, it is common to make fields private. This means that variables can only be directly accessed from the class. We still need access to these values, however. This can be done indirectly by adding public methods that obtain the field values for us.
- Direct access (obj.a = 11)
 * Simple, direct and requires less code since you directly access the variable
 * Violates encapsulation principle in OOP
 * If the class internal implementation changes (eg you want to add validation or logging when updating the value), you need to modify all the places where the variable directly accessed.
 * The field is exposed as public , which makes it accessible to any other class. This can lead to unintended modification and harder debugging.
- Using a Setter Method
* Adheres to the encapsulation principle of OOP
* Provided a controlled way to update the value, enabling you to.
   Add Validation(eg. ensure value is in a specific range)
   Add additional logic, such as logging or triggering other processes
   Protect the internal state of the object. It means that the internal data (fields) of an object cannot be directly accessed or modified in ways that may compromise the integrity,consistency or intended behaviour of the object.
 * Add a small performance overhead due to the method call 
